# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type EventTypes {
  id: ID!
  text: String
  code: Float!
  caseevent: [CaseEvents!]
}

type CaseEvents {
  id: ID!
  eventtypeId: Float
  artifactId: Float!
  workflowtype: String
  casehistory: [CaseHistory!]
  eventtype: EventTypes
}

type CaseHistory {
  id: ID!
  datetime: DateTime!
  outcome: String!
  userid: Float!
  eventId: Float!
  event: CaseEvents
  case: Cases
  caseId: Float
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CaseNotes {
  id: ID!
  caseid: Float
  creationdate: DateTime!
  userid: Float!
  notetext: String
  case: Cases
}

type Cases {
  id: ID!
  contactid: String!
  clientid: String!
  issuetype: String
  nextreviewdate: DateTime!
  status: String!
  creationdate: DateTime!
  completiondate: DateTime
  lastmodificationdate: DateTime
  archivedate: DateTime
  startuserid: Float
  casehistory: [CaseHistory!]
  casenote: [CaseNotes!]
}

type casesResponse {
  Cases: [Cases!]!
  totalCount: Int!
}

type CaseTypes {
  id: ID!
  name: String
  displayname: String!
  caseextrafields: Float
  lobfields: Float
  code: Float!
  displaylocations: Float!
  formid: String
  searchterm: String
  casestatus: [CaseStatuses!]
}

type CaseStatuses {
  id: ID!
  casetypeid: Float
  name: String!
  displayname: String!
  code: String!
  casestype: CaseTypes
}

type Query {
  getCase(skip: Int = 0, take: Int = 25, id: Int!): Cases!
  case(skip: Int = 0, take: Int = 25): casesResponse!
  Searchcase(searchField: String!, searchColumn: String!, orderBy: String!, orderType: String!, skip: Int = 0, take: Int = 25): casesResponse!
  fetchRecentCase: [Cases!]!
  getAllCaseHistory: [CaseHistory!]!
  caseHistory(id: Int!): CaseHistory!
  getAllCaseEvents: [CaseEvents!]!
  caseEvent(id: Int!): CaseEvents!
  eventTypes: [EventTypes!]!
  eventType(id: Int!): EventTypes!
  getCaseStatuses: [CaseStatuses!]!
  getSingleCaseStatus(id: Int!): CaseStatuses!
  getCaseTypes: [CaseTypes!]!
  caseType(id: Int!): CaseTypes!
  caseNotes: [CaseNotes!]!
  caseNote(id: Int!): CaseNotes!
  caseNotesByCaseId(id: Int!): [CaseNotes!]!
}

type Mutation {
  createCase(createCaseInput: CreateCaseInput!): Cases!
  updateCase(updateCaseInput: UpdateCaseInput!): Cases!
  removeCase(removeCaseArgs: RemoveCaseArgs!): Cases!
  createCaseHistory(createCaseHistoryInput: CreateCaseHistoryInput!): CaseHistory!
  updateCaseHistory(updateCaseHistoryInput: UpdateCaseHistoryInput!): CaseHistory!
  removeCaseHistory(id: Int!): CaseHistory!
  createCaseEvent(createCaseEventInput: CreateCaseEventInput!): CaseEvents!
  updateCaseEvent(updateCaseEventInput: UpdateCaseEventInput!): CaseEvents!
  removeCaseEvent(id: Int!): CaseEvents!
  createEventType(createEventTypeInput: CreateEventTypeInput!): EventTypes!
  updateEventType(updateEventTypeInput: UpdateEventTypeInput!): EventTypes!
  removeEventType(id: Int!): EventTypes!
  createCaseType(createCaseTypeInput: CreateCaseTypeInput!): CaseTypes!
  updateCaseType(updateCaseTypeInput: UpdateCaseTypeInput!): CaseTypes!
  removeCaseType(id: Int!): CaseTypes!
  createCaseNote(createCaseNoteInput: CreateCaseNoteInput!): CaseNotes!
  updateCaseNote(updateCaseNoteInput: UpdateCaseNoteInput!): CaseNotes!
  removeCaseNote(id: Int!): CaseNotes!
}

input CreateCaseInput {
  clientid: String!
  contactid: String!
  status: String!
  issuetype: String!
  nextreviewdate: DateTime
  completiondate: DateTime
  lastmodificationdate: DateTime
  creationdate: DateTime
  archivedate: DateTime
  startuserid: Int
}

input UpdateCaseInput {
  id: Int!
  clientid: String!
  contactid: String!
  status: String!
  issuetype: String!
  nextreviewdate: DateTime
  completiondate: DateTime
  lastmodificationdate: DateTime
  creationdate: DateTime
  archivedate: DateTime
  startuserid: Int
}

input RemoveCaseArgs {
  id: Int!
}

input CreateCaseHistoryInput {
  datetime: DateTime = "2024-03-16T01:36:03.793Z"
  outcome: String = "sucess"
  userid: Float
  caseId: [Int!]!
  eventId: [Int!]!
  doc_desc: String
  doc_name: String
}

input UpdateCaseHistoryInput {
  datetime: DateTime = "2024-03-16T01:36:03.793Z"
  outcome: String = "sucess"
  userid: Float
  caseId: [Int!]
  eventId: [Int!]
  doc_desc: String
  doc_name: String
  id: Int!
}

input CreateCaseEventInput {
  artifactId: Int!
  eventtypeId: Int!
  workflowtype: String
}

input UpdateCaseEventInput {
  artifactId: Int
  eventtypeId: Int
  workflowtype: String
  id: Int!
}

input CreateEventTypeInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateEventTypeInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateCaseTypeInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateCaseTypeInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
  name: String!
  displayname: String!
  caseextrafields: Float
  lobfields: Float
  code: Float!
  displaylocations: Float
  formid: String
  searchterm: String
}

input CreateCaseNoteInput {
  caseid: Float!
  creationdate: DateTime = "2024-03-16T01:36:04.291Z"
  userid: Float
  notetext: String
}

input UpdateCaseNoteInput {
  caseid: Float
  creationdate: DateTime = "2024-03-16T01:36:04.291Z"
  userid: Float
  notetext: String
  id: Int!
}

scalar link__Import